최종 복구 완료 메시지 로직 수정:
Recovery.xaml.cs 파일의 StartDiagnosticWizard_Click 메서드에서 모든 개별 복구 작업(Defender, Firewall, Security Center, BitLocker)이 완료된 후, 
각 작업의 상태(예: DefenderStatus.Text, SecurityCenterStatus.Text 등)를 확인합니다.
모든 작업의 상태가 "완료"인 경우에만 "정밀 보안 진단 및 복구가 성공적으로 완료되었습니다."와 같은 성공 메시지를 표시합니다.
하나라도 "오류 발생" 상태인 경우, "정밀 보안 진단 및 복구 과정에서 오류가 발생했습니다. 상세 결과 보고서를 확인하십시오." 와 같은 메시지를 표시하여 
사용자에게 전체 성공이 아님을 알리고 상세 보고서를 확인하도록 안내합니다.

Windows 보안 센터 서비스 재시작 실패 시 재시도 로직 추가:
Recovery.xaml.cs 파일의 RecoverSecurityCenter 메서드 내에서 Restart-Service wscsvc -Force PowerShell 명령을 실행할 때, 
명령이 실패하는 경우(RunPowerShellCommand가 false를 반환하고 오류 출력이 CouldNotStopService와 관련 있는 경우) 
일정 시간 대기 후 몇 차례 자동으로 재시도하도록 로직을 추가합니다.
재시도 후에도 실패하는 경우에만 최종적으로 "오류 발생"으로 처리하고 상세 오류 메시지를 기록합니다.

오류 메시지 처리 개선:
RunPowerShellCommand 메서드에서 발생한 PowerShell 스크립트 오류나 예외 정보를 더 상세하게 캡처하여 
defenderRecoveryError, firewallRecoveryError 등의 변수에 저장하도록 개선합니다. 
현재는 "스크립트 실행 실패"와 같이 일반적인 메시지만 저장될 수 있습니다. 
PowerShell의 StandardError 출력을 해당 변수에 저장하면 상세 오류 원인 파악에 도움이 됩니다.
이러한 단계를 통해 복구 과정의 정확성을 높이고 사용자에게 더 명확한 피드백을 제공할 수 있습니다. 
첫 번째 단계부터 시작하여 최종 메시지 로직을 수정하는 것이 가장 시급합니다.

=====================================

.NET 프레임워크나 다른 Windows API를 사용하여 보안 프로그램 복구 작업을 수행할 수 있는 다른 방법

System.ServiceProcess.ServiceController 클래스 사용

Windows Management Instrumentation (WMI) 사용

직접 Windows API 호출 (P/Invoke)