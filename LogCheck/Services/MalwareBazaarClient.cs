using System.Net.Http;
using System.Text.Json;

namespace LogCheck.Services
{
    /// <summary>
    /// MalwareBazaar API를 호출하여 SHA-256 해시의 악성 여부를 조회하는 헬퍼 클래스
    /// </summary>
    public static class MalwareBazaarClient
    {
        private static readonly HttpClient _httpClient = new()
        {
            Timeout = TimeSpan.FromSeconds(15)
        };

        /// <summary>
        /// SHA-256 해시에 대한 MalwareBazaar 판정을 가져옵니다.
        /// </summary>
        /// <param name="sha256">조회할 SHA-256 해시</param>
        /// <returns>
        /// Malicious: DB에 존재 (악성 샘플로 분류)
        /// Unknown  : DB에 없음 또는 오류
        /// </returns>
        public static async Task<string> GetVerdictAsync(string sha256)
        {
            try
            {
                // MalwareBazaar API는 POST multipart/form-data 형식 사용
                using var content = new MultipartFormDataContent
                {
                    { new StringContent("get_info"), "query" },
                    { new StringContent(sha256), "hash" }
                };

                using var response = await _httpClient.PostAsync("https://mb-api.abuse.ch/api/v1/", content);
                if (!response.IsSuccessStatusCode)
                    return "Unknown";

                var json = await response.Content.ReadAsStringAsync();
                using var doc = JsonDocument.Parse(json);
                if (!doc.RootElement.TryGetProperty("query_status", out var qs))
                    return "Unknown";

                string status = qs.GetString() ?? "";
                if (status.Equals("ok", StringComparison.OrdinalIgnoreCase))
                {
                    return "Malicious"; // DB 내 존재 → 악성 샘플
                }

                if (status.Equals("hash_not_found", StringComparison.OrdinalIgnoreCase))
                    return "Not Found";

                if (status.Equals("rate_limit", StringComparison.OrdinalIgnoreCase))
                    return "Rate Limit";

                return "Error"; // invalid_hash 등 기타
            }
            catch
            {
                return "Unknown"; // 네트워크 오류 등
            }
        }
    }
}