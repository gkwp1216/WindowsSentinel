# 네트워크 모니터링 기능 구현 작업 내용

## 1. 구현된 기능
### 1.1 현재 접속 상태 조회
- CurrentConnectionModel 클래스 추가
  - Protocol, LocalAddress, ForeignAddress, State, PID 속성 포함
- GetCurrentConnectionsAsync() 메서드 구현
  - netstat -ano 명령어를 실행하여 현재 네트워크 연결 상태 조회
  - TCP/UDP 연결 정보 파싱 및 모델 객체로 변환
  - 관리자 권한으로 실행 (Verb = "runas")
  - 헤더 검증 및 데이터 파싱 로직 개선
- UI 구현
  - 현재 접속 상태 보기 버튼 (BtnCurrentConnections)
  - 현재 접속 상태 DataGrid (currentConnectionsDataGrid)
    - 프로토콜, 로컬 주소, 원격 주소, 상태, PID 컬럼 포함
    - 컬럼 너비 최적화 (프로토콜: 100px, 상태: 100px, PID: 80px)

### 1.2 기간별 네트워크 접속 기록 조회
- LoadFirewallEventLogsAsync() 메서드 오버로드 추가
  - 시작일/종료일 기반으로 이벤트 로그 필터링
  - EventLogQuery에 TimeCreated 조건 추가
  - 감사 정책 상태 확인 및 자동 활성화
- BtnPeriodSearch_Click 이벤트 핸들러 구현
  - DatePicker에서 선택한 기간으로 로그 조회
  - 종료일은 23:59:59까지 포함
  - 종료일 기본값을 오늘 날짜로 설정
- UI 구현
  - 시작일/종료일 DatePicker (StartDatePicker, EndDatePicker)
  - 기간별 기록 조회 버튼 (BtnPeriodSearch)

### 1.3 감사 정책 관리
- IsAuditPolicyEnabled() 메서드 구현
  - "Filtering Platform Connection" 감사 정책 상태 확인
  - 성공/실패 이벤트 모두 확인
- EnableAuditPolicy() 메서드 구현
  - "Filtering Platform Connection" 및 "Filtering Platform Packet Drop" 정책 활성화
  - 관리자 권한으로 실행
  - 정책 활성화 시 사용자에게 알림

## 2. UI 변경사항
### 2.1 추가된 컨트롤
1. 현재 접속 상태 및 기간별 조회 섹션 (Grid.Row="1")
   ```xml
   <!-- 현재 접속 상태 -->
   <Button x:Name="BtnCurrentConnections" 
           Content="현재 접속 상태 보기" 
           Click="BtnCurrentConnections_Click"
           Style="{DynamicResource CheckButtonStyle}"
           Padding="15,10"
           Height="40"/>

   <!-- 기간별 조회 -->
   <DatePicker x:Name="StartDatePicker" 
               Width="120" 
               materialDesign:HintAssist.Hint="시작일"/>
   <DatePicker x:Name="EndDatePicker" 
               Width="120" 
               materialDesign:HintAssist.Hint="종료일"/>
   <Button x:Name="BtnPeriodSearch" 
           Content="기간별 기록 조회" 
           Click="BtnPeriodSearch_Click"
           Style="{DynamicResource CheckButtonStyle}"/>
   ```

2. 현재 접속 상태 DataGrid (Grid.Row="2")
   ```xml
   <DataGrid x:Name="currentConnectionsDataGrid" 
             AutoGenerateColumns="False"
             IsReadOnly="True"
             Height="200">
       <DataGrid.Columns>
           <DataGridTextColumn Header="프로토콜" Binding="{Binding Protocol}" Width="100"/>
           <DataGridTextColumn Header="로컬 주소" Binding="{Binding LocalAddress}" Width="*"/>
           <DataGridTextColumn Header="원격 주소" Binding="{Binding ForeignAddress}" Width="*"/>
           <DataGridTextColumn Header="상태" Binding="{Binding State}" Width="100"/>
           <DataGridTextColumn Header="PID" Binding="{Binding PID}" Width="80"/>
       </DataGrid.Columns>
   </DataGrid>
   ```

### 2.2 레이아웃 구조
1. 제목 및 검사 버튼 (Grid.Row="0")
2. 현재 접속 상태 및 기간별 조회 컨트롤 (Grid.Row="1")
3. 현재 접속 상태 DataGrid (Grid.Row="2")
4. 기존 이벤트 로그 DataGrid (Grid.Row="3")

## 3. 해결된 오류
- StartDatePicker 컨트롤 미정의 오류 해결
- EndDatePicker 컨트롤 미정의 오류 해결
- currentConnectionsDataGrid 컨트롤 미정의 오류 해결
- netstat 명령어 실행 시 관리자 권한 문제 해결
- 감사 정책 활성화 관련 권한 문제 해결

## 4. 최근 개선사항 (2024-06-09)
1. 감사 정책 관리 개선
   - 정책 상태 확인 로직 강화
   - 자동 활성화 시 사용자 알림 추가
   - 정책 활성화 실패 시 상세 오류 메시지 표시

2. 현재 접속 상태 조회 개선
   - netstat 출력 파싱 로직 개선
   - 헤더 검증 추가
   - 오류 처리 강화
   - 관리자 권한 실행 보장

3. 기간별 조회 기능 개선
   - 종료일 기본값을 오늘 날짜로 설정
   - 날짜 범위 유효성 검사 추가
   - 이벤트 로그 쿼리 최적화

4. UI/UX 개선
   - 로딩 상태 표시 개선
   - 오류 메시지 상세화
   - 컬럼 너비 최적화
   - 사용자 피드백 강화

## 5. 다음 작업 단계
1. 기능 테스트
   - 현재 접속 상태 조회 기능 테스트
   - 기간별 조회 기능 테스트
   - 감사 정책 활성화/비활성화 테스트

2. UI 개선
   - 필요시 컨트롤 크기 및 위치 조정
   - 사용자 피드백 반영
   - 로딩 상태 표시 개선

3. 오류 처리
   - 예외 상황 처리 개선
   - 사용자 친화적인 오류 메시지 추가
   - 로깅 기능 강화

## 6. 참고사항
- 현재 접속 상태 조회는 netstat 명령어 사용
- 기간별 조회는 Windows 이벤트 로그의 Security 로그 활용
- 모든 시간은 UTC 기준으로 처리됨
- UI 스타일은 기존 디자인 시스템을 따름
- 관리자 권한이 필요한 기능들:
  - netstat 명령어 실행
  - 감사 정책 관리
  - 이벤트 로그 접근 